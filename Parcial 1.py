import redis
import uuid

# Configuraci√≥n de conexi√≥n a KeyDB
KEYDB_HOST = "localhost"
KEYDB_PORT = 6379
KEYDB_DB = 0

keydb = redis.StrictRedis(host=KEYDB_HOST, port=KEYDB_PORT, db=KEYDB_DB, decode_responses=True)

# Funciones CRUD para el sistema de registro de presupuesto
def registrar_articulo():
    """Registrar un nuevo art√≠culo en el presupuesto."""
    try:
        id_articulo = str(uuid.uuid4())  # Genera un ID √∫nico
        descripcion = input("Descripci√≥n del art√≠culo: ")
        cantidad = input("Cantidad (en n√∫meros): ")
        categoria = input("Categor√≠a del art√≠culo: ")

        # Validar entrada
        if not descripcion or not cantidad.isdigit() or not categoria:
            print("‚ùå Entrada inv√°lida. Por favor, aseg√∫rese de ingresar valores correctos.")
            return

        # Crear el hash en KeyDB
        keydb.hset(
            id_articulo,
            mapping={
                "descripcion": descripcion,
                "cantidad": cantidad,
                "categoria": categoria,
            }
        )
        print(f"‚úÖ Art√≠culo registrado exitosamente con ID: {id_articulo}")
    except Exception as e:
        print(f"‚ùå Error al registrar el art√≠culo: {e}")

def buscar_articulo():
    """Buscar un art√≠culo en el presupuesto por ID."""
    try:
        id_articulo = input("Ingrese el ID del art√≠culo a buscar: ")
        if not keydb.exists(id_articulo):
            print("‚ùå No se encontr√≥ un art√≠culo con ese ID.")
            return

        articulo = keydb.hgetall(id_articulo)
        print("\nüìã Detalles del art√≠culo:")
        print(f"ID: {id_articulo}")
        print(f"Descripci√≥n: {articulo['descripcion']}")
        print(f"Cantidad: {articulo['cantidad']}")
        print(f"Categor√≠a: {articulo['categoria']}")
    except Exception as e:
        print(f"‚ùå Error al buscar el art√≠culo: {e}")

def editar_articulo():
    """Editar un art√≠culo existente en el presupuesto."""
    try:
        id_articulo = input("Ingrese el ID del art√≠culo a editar: ")
        if not keydb.exists(id_articulo):
            print("‚ùå No se encontr√≥ un art√≠culo con ese ID.")
            return

        articulo = keydb.hgetall(id_articulo)
        print("\nüìã Detalles actuales del art√≠culo:")
        print(f"Descripci√≥n: {articulo['descripcion']}")
        print(f"Cantidad: {articulo['cantidad']}")
        print(f"Categor√≠a: {articulo['categoria']}")

        nueva_descripcion = input("Nueva descripci√≥n (dejar en blanco para no cambiar): ")
        nueva_cantidad = input("Nueva cantidad (dejar en blanco para no cambiar): ")
        nueva_categoria = input("Nueva categor√≠a (dejar en blanco para no cambiar): ")

        # Actualizar s√≥lo los campos que se hayan proporcionado
        if nueva_descripcion:
            keydb.hset(id_articulo, "descripcion", nueva_descripcion)
        if nueva_cantidad and nueva_cantidad.isdigit():
            keydb.hset(id_articulo, "cantidad", nueva_cantidad)
        if nueva_categoria:
            keydb.hset(id_articulo, "categoria", nueva_categoria)

        print("‚úÖ Art√≠culo actualizado exitosamente.")
    except Exception as e:
        print(f"‚ùå Error al editar el art√≠culo: {e}")

def eliminar_articulo():
    """Eliminar un art√≠culo del presupuesto."""
    try:
        id_articulo = input("Ingrese el ID del art√≠culo a eliminar: ")
        if not keydb.exists(id_articulo):
            print("‚ùå No se encontr√≥ un art√≠culo con ese ID.")
            return

        keydb.delete(id_articulo)
        print("‚úÖ Art√≠culo eliminado exitosamente.")
    except Exception as e:
        print(f"‚ùå Error al eliminar el art√≠culo: {e}")

def ver_listado_articulos():
    """Ver el listado de todos los art√≠culos en el presupuesto."""
    try:
        claves = keydb.keys()
        if not claves:
            print("‚ùå No hay art√≠culos registrados.")
            return

        print("\nüìú Listado de art√≠culos:")
        for i, clave in enumerate(claves, start=1):
            articulo = keydb.hgetall(clave)
            print(f"{i}. ID: {clave}, Descripci√≥n: {articulo['descripcion']}, Cantidad: {articulo['cantidad']}, Categor√≠a: {articulo['categoria']}")
    except Exception as e:
        print(f"‚ùå Error al mostrar el listado de art√≠culos: {e}")

# Men√∫ principal
def menu():
    """Mostrar el men√∫ principal del sistema."""
    while True:
        print("\n=== Sistema de Registro de Presupuesto ===")
        print("1. Registrar nuevo art√≠culo")
        print("2. Buscar art√≠culo por ID")
        print("3. Editar art√≠culo existente")
        print("4. Eliminar art√≠culo existente")
        print("5. Ver listado de art√≠culos")
        print("6. Salir")

        opcion = input("Seleccione una opci√≥n: ")

        if opcion == "1":
            registrar_articulo()
        elif opcion == "2":
            buscar_articulo()
        elif opcion == "3":
            editar_articulo()
        elif opcion == "4":
            eliminar_articulo()
        elif opcion == "5":
            ver_listado_articulos()
        elif opcion == "6":
            print("üëã ¬°Hasta luego!")
            break
        else:
            print("‚ùå Opci√≥n no v√°lida. Intente nuevamente.")

if __name__ == "__main__":
    menu()